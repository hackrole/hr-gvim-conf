" Dark powered mode of SpaceVim, generated by SpaceVim automatically.
let g:spacevim_enable_debug = 1
let g:spacevim_realtime_leader_guide = 1
call SpaceVim#layers#load('incsearch')
call SpaceVim#layers#load('lang#c')
call SpaceVim#layers#load('lang#elixir')
call SpaceVim#layers#load('lang#go')
call SpaceVim#layers#load('lang#haskell')
call SpaceVim#layers#load('lang#java')
call SpaceVim#layers#load('lang#javascript')
call SpaceVim#layers#load('lang#lua')
call SpaceVim#layers#load('lang#perl')
call SpaceVim#layers#load('lang#php')
call SpaceVim#layers#load('lang#python')
call SpaceVim#layers#load('lang#rust')
call SpaceVim#layers#load('lang#swig')
call SpaceVim#layers#load('lang#tmux')
call SpaceVim#layers#load('lang#vim')
call SpaceVim#layers#load('lang#xml')
call SpaceVim#layers#load('shell')   
call SpaceVim#layers#load('tools#screensaver')
let g:spacevim_enable_vimfiler_welcome = 0
let g:spacevim_enable_debug = 1
let g:deoplete#auto_complete_delay = 150
let g:spacevim_enable_tabline_filetype_icon = 1
let g:spacevim_enable_os_fileformat_icon = 1
let g:spacevim_buffer_index_type = 1
let g:neomake_vim_enabled_makers = []
if executable('vimlint')
    call add(g:neomake_vim_enabled_makers, 'vimlint') 
endif
if executable('vint')
    call add(g:neomake_vim_enabled_makers, 'vint') 
endif
if has('python3')
    let g:ctrlp_map = ''
    nnoremap <silent> <C-p> :Denite file_rec<CR>
endif
let g:clang2_placeholder_next = ''
let g:clang2_placeholder_prev = ''

" cache files
let g:spacevim_plugin_bundle_dir = "~/.cache/vimfiles"
" colorschema
"let g:spacevim_colorscheme = "jellybeans"

" realdtime guide
let g:spacevim_realtime_leader_guide = 1
" the default help language
let g:spacevim_vim_help_language = 'chinese'
" auto update on startup
let g:spacevim_checkinstall = 1
" plugin groups to be leader
" let g:spacevim_plugin_groups = ["core", "lang"]
" github username for star repos
let g:spacevim_github_username = "hackrole"

" set windows shortcut leader [window], default is `s`
let g:spacevim_windows_leader = 's'
" unite work leader key [Unite]
let g:spacevim_unite_leader = '<leader>f'
let g:spacevim_denite_leader = '<leader>F'

" code lint on save
let g:spacevim_lint_on_save = 1
" code lint on the fly feature
let g:spacevim_lint_on_the_fly = 0

" use ultisnips engine
let g:spacevim_snippet_engine = "ultisnips"

" disable plugins
" let g:spacevim_disabled_plugins = []
" custom plugins
let g:spacevim_custom_plugins = [
\ ['plasticboy/vim-markdown', {'on_ft': 'markdown'}],
\ ['wsdjeg/Github.vim'],
\]

" set the guifont 
" let g:spacevim_guifont = 'DejaVu\ Sans\ Mono\ for\ Powerline\ 11'

" add personal settings after SpaceVim
execute 'set runtimepath+=' . expand("~/.SpaceVim.d/after")


" do some keymap
tnoremap <M-n> <C-\><C-n>:tabprevious<CR>
tnoremap <M-m> <C-\><C-n>:tabnext<CR>
nnoremap <C-t> :tabnew<CR>
nnoremap <leader>to :only<CR>
nnoremap <M-n> :tabprevious<CR>
nnoremap <M-m> :tabnext<CR>
nnoremap <leader>pt :NERDTree<CR>
nnoremap <leader>tt :tabnew<CR>:terminal tmux<CR>
nnoremap <leader>ts :split<CR>:terminal tmux<CR>
" quick edit
inoremap <M-o> <ESC>o
inoremap <C-o> <CR><ESC>O

" config denite.nvim {{{1
" add menu
let s:menus = {}
let s:menus.zsh = {
            \ 'description': 'Edit your import zsh configuration'
            \ }
let s:menus.zsh.file_candidates = [
            \ ['zshrc', '~/.config/zsh/.zshrc'],
            \ ['zshenv', '~/.zshenv'],
            \ ]
let s:menus.my_commands = {
            \ 'description': 'Example commands'
            \ }
let s:menus.my_commands.command_candidates = [
            \ ['Split the window', 'vnew'],
            \ ['Open zsh menu', 'Denite menu:zsh'],
            \ ]

call denite#custom#var('menu', 'menus', s:menus)

" denite map
nnoremap <leader>dd :<C-u>Denite -default-action=ex directory_mru<cr>
nnoremap <leader>dh :<C-u>Denite help<cr>
nnoremap <leader>dm :<C-u>Denite menu<cr>
nnoremap <leader>dr :<C-u>Denite -mode=normal register<cr>
"1}}}

" c

" unite project
let g:unite_projects_workspaces=["~/projects", "~/hr-conf"]
